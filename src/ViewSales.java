
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import shopmanagementsystem.ShopManagementSystem;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author HP1
 */
public class ViewSales extends javax.swing.JFrame {

    /**
     * Creates new form ViewSales
     */
    public ViewSales() {
        initComponents();
        loadSales();
    }

    private void loadSales() {
        // Get the table model from the tblproduct JTable
        DefaultTableModel model = (DefaultTableModel) tblsales.getModel();
        model.setRowCount(0); // Clear existing data
        
        try (Connection conn = ShopManagementSystem.getConnection();
             PreparedStatement stmt = conn.prepareStatement("SELECT * FROM sales");
             ResultSet rs = stmt.executeQuery()) {
            
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("sale_id"),
                    rs.getInt("customer_id"),
                    rs.getInt("product_id"),
                    rs.getInt("quantity"),
                    rs.getDouble("total_price"),
                    rs.getDate("sale_date")
                };
                model.addRow(row);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblsalesmade = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblsales = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblsalesmade.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblsalesmade.setText("SALES MADE");

        tblsales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SALES ID", "CUSTOMER ID", "PRODUCT ID", "QUANTITY", "TOTAL PRICE", "SALES DATE"
            }
        ));
        jScrollPane1.setViewportView(tblsales);

        btnUpdate.setText("UPDATE SALE");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE SALE");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExit.setText("EXIT");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblsalesmade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(lblsalesmade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnUpdate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExit)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        // Ensure a sale record is selected
    int selectedRow = tblsales.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a sale record to update.");
        return;
    }
    
    // Retrieve the sale ID from the selected row
    int saleId = (int) tblsales.getValueAt(selectedRow, 0);
    
    // Retrieve current values for reference
    int currentCustomerId = (int) tblsales.getValueAt(selectedRow, 1);
    int currentProductId = (int) tblsales.getValueAt(selectedRow, 2);
    int currentQuantity = (int) tblsales.getValueAt(selectedRow, 3);
    
    // Prompt user for new values, pre-filled with current values
    String newCustomerIdStr = JOptionPane.showInputDialog(this, "Enter new Customer ID:", currentCustomerId);
    String newProductIdStr = JOptionPane.showInputDialog(this, "Enter new Product ID:", currentProductId);
    String newQuantityStr = JOptionPane.showInputDialog(this, "Enter new Quantity:", currentQuantity);
    
    // Cancel update if any input dialog is cancelled
    if (newCustomerIdStr == null || newProductIdStr == null || newQuantityStr == null) {
        JOptionPane.showMessageDialog(this, "Update canceled.");
        return;
    }
    
    // Parse the inputs to integers
    int newCustomerId, newProductId, newQuantity;
    try {
        newCustomerId = Integer.parseInt(newCustomerIdStr.trim());
        newProductId = Integer.parseInt(newProductIdStr.trim());
        newQuantity = Integer.parseInt(newQuantityStr.trim());
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid numeric value provided.");
        return;
    }
    
    // Retrieve product price for the new product ID to calculate the total price
    double productPrice = 0.0;
    try (Connection conn = ShopManagementSystem.getConnection();
         PreparedStatement stmt = conn.prepareStatement("SELECT price FROM products WHERE product_id = ?")) {
         
         stmt.setInt(1, newProductId);
         ResultSet rs = stmt.executeQuery();
         if (rs.next()) {
             productPrice = rs.getDouble("price");
         } else {
             JOptionPane.showMessageDialog(this, "Product ID does not exist.");
             return;
         }
    } catch (Exception e) {
         JOptionPane.showMessageDialog(this, "Error retrieving product price: " + e.getMessage());
         return;
    }
    
    // Calculate the new total price
    double newTotalPrice = productPrice * newQuantity;
    
    // Update the sale record in the database
    try (Connection conn = ShopManagementSystem.getConnection();
         PreparedStatement stmt = conn.prepareStatement(
             "UPDATE sales SET customer_id = ?, product_id = ?, quantity = ?, total_price = ? WHERE sale_id = ?")) {
         
         stmt.setInt(1, newCustomerId);
         stmt.setInt(2, newProductId);
         stmt.setInt(3, newQuantity);
         stmt.setDouble(4, newTotalPrice);
         stmt.setInt(5, saleId);
         
         int rowsUpdated = stmt.executeUpdate();
         if (rowsUpdated > 0) {
             JOptionPane.showMessageDialog(this, "Sale updated successfully.");
         } else {
             JOptionPane.showMessageDialog(this, "Update failed. Sale ID not found.");
         }
    } catch (Exception e) {
         JOptionPane.showMessageDialog(this, "Error updating sale: " + e.getMessage());
         e.printStackTrace();
         return;
    }
    
    // Refresh the sales table to display updated data
    loadSales();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // Exit button
        int confirm = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to exit?",
        "Exit",
        JOptionPane.YES_NO_OPTION
    );
    if (confirm == JOptionPane.YES_OPTION) {
        System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // Ensure a sale record is selected
        int selectedRow = tblsales.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a sale record to delete.");
            return;
    }
    
        // Retrieve the sale ID from the selected row
        int saleId = (int) tblsales.getValueAt(selectedRow, 0);
    
        // Confirm deletion with the user
        int confirm = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to delete the sale record with ID " + saleId + "?",
        "Confirm Deletion",
        JOptionPane.YES_NO_OPTION
    );
    
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }
    
        // Delete the sale record from the database
        try (Connection conn = ShopManagementSystem.getConnection();
            PreparedStatement stmt = conn.prepareStatement("DELETE FROM sales WHERE sale_id = ?")) {
        
            stmt.setInt(1, saleId);
            int rowsDeleted = stmt.executeUpdate();
        
            if (rowsDeleted > 0) {
                JOptionPane.showMessageDialog(this, "Sale record deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Deletion failed. Sale record not found.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error deleting sale record: " + e.getMessage());
    }
    
    // Refresh the sales table
        loadSales();
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewSales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewSales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblsalesmade;
    private javax.swing.JTable tblsales;
    // End of variables declaration//GEN-END:variables
}
